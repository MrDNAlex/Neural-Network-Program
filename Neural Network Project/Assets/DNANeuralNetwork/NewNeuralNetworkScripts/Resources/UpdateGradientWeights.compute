// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct MatrixDimensions
{
    int width;
    int height;
    
    int GetLength()
    {
        return width * height;
    }
};

//Dimensions of the matrices
RWStructuredBuffer<MatrixDimensions> dimensions; //node Values, inputs (transposed)

RWStructuredBuffer<double> nodeValues;

RWStructuredBuffer<double> inputs; //Assume this is transposed

RWStructuredBuffer<double> costGradient;


int NodeIndex(int row, int col)
{
    return row * dimensions[0].width + col;
}

int InputsIndex(int row, int col)
{
   return row * dimensions[1].width + col;
}

double DotProduct(int row, int column)
{
    double sum = 0;
     // Perform matrix multiplication
    for (int i = 0; i < dimensions[0].width; ++i)
        sum += nodeValues[NodeIndex(row, i)] * inputs[InputsIndex(i, column)]; //InputsIndex(i, column)
    
    return sum;
}


[numthreads(1,1,1)]
void CSMain(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    int row = DispatchThreadID.y;
    int col = DispatchThreadID.x;
    
    costGradient[InputsIndex(row, col)] = DotProduct(row, col);
}
