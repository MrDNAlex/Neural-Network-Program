// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct MatrixDimensions
{
    uint width;
    uint height;
    
    uint GetLength()
    {
        return width * height;
    }
};

//Weights
RWStructuredBuffer<MatrixDimensions> dimensions; //[weights, bias, inputs]

RWStructuredBuffer<double> weights;

//Inputs
RWStructuredBuffer<double> inputs;

//Bias
RWStructuredBuffer<double> bias;

//Weighted inputs
RWStructuredBuffer<double> weightedInputs;

//Activation
RWStructuredBuffer<double> activation;

//Activation Function Type
RWStructuredBuffer<int> activationFunction;

//Exponential Sum (For Softmax)
float expSum = 0;

//Sigmoid Activation Function
double Sigmoid(double value)
{
    return 1.0 / (1 + exp(-value));
}

//TanH Activation Function
double TanH(double value)
{
    double e2 = exp(2 * value);
    return (e2 - 1) / (e2 + 1);
}

//ReLu Activation Function
double ReLu(double value)
{
    return max(0, value);
}

//SiLu Activation Function
double SiLu(double value)
{
    return value / (1 + exp(-value));
}

//Softmax Activation Function
double Softmax(double value)
{
    return exp(value) / expSum;
}

//Applies certain activation function
double ApplyActivation(double value)
{
    double activation = 0;
    
   // activation = Sigmoid(value);
    
    switch (activationFunction[0])
    {
        case 1:
            activation = Sigmoid(value);
            break;
        case 2:
            activation = TanH(value);
            break;
        case 3:
            activation = ReLu(value);
            break;
        case 4:
            activation = SiLu(value);
            break;
        case 5:
            activation = Softmax(value);
            break;

    }

    return activation;

}

uint GetIndex(uint row, uint column)
{
    return row * dimensions[1].width + column;
}

uint GetMatrixOffset(uint matrixIndex)
{
    return matrixIndex * (dimensions[2].GetLength());
}

///Performs the dot product necessary for the matrix multiplication
double DotProduct(uint row, uint column, uint matrixIndex)
{
    double sum = 0;
     // Perform matrix multiplication
    for (uint i = 0; i < dimensions[0].width; ++i)
        sum += weights[row * dimensions[0].width + i] * inputs[GetMatrixOffset(matrixIndex) + i * dimensions[2].width + column];
    
    return sum;
}

//Performs the entire layer operation
double LayerOperation(uint row, uint column, uint matrixIndex)
{
    double innerProduct = DotProduct(row, column, matrixIndex);
    
    innerProduct += bias[GetIndex(row, column)];
    
    //Get Dot product
    weightedInputs[matrixIndex * dimensions[1].GetLength() + GetIndex(row, column)] = innerProduct;
    
    expSum = exp(innerProduct);
    
    //Apply activation
    return ApplyActivation(innerProduct);
}

[numthreads(1, 1, 1)]
void CSMain(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    uint row = DispatchThreadID.y;
    uint col = DispatchThreadID.x;
    uint matrixIndex = DispatchThreadID.z;
    
   
    
    activation[matrixIndex * dimensions[1].GetLength() + GetIndex(row, col)] = LayerOperation(row, col, matrixIndex);
}
