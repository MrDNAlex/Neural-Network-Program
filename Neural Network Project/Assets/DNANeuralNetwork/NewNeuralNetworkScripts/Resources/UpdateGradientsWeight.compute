// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
struct MatrixDimensions
{
    int width;
    int height;
    
    int GetLength()
    {
        return width * height;
    }
};

//Dimensions      Node Values = cost Gradient Bias
RWStructuredBuffer<MatrixDimensions> dimensions; //node Value, inputs, costGradientWeights

//Weighted Inputs
RWStructuredBuffer<double> inputs; //Need to transpose this

//Node Values
RWStructuredBuffer<double> nodeValues;

//Activation
RWStructuredBuffer<double> costGradientWeight;

///Performs the dot product necessary for the matrix multiplication
double DotProduct(int row, int column, int matrixIndex)
{
    double sum = 0;
     // Perform matrix multiplication
    for (int i = 0; i < dimensions[0].width; ++i)
        sum += nodeValues[row * dimensions[0].width + i] * inputs[i * dimensions[1].width + column]; //Might be other way   i * dimensions[1].width + column
    
    return sum;
}

[numthreads(1, 1, 1)]
void CSMain(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    int row = DispatchThreadID.y;
    int col = DispatchThreadID.x;
    int matrixIndex = DispatchThreadID.z;
    
    costGradientWeight[row * dimensions[2].width + col] += DotProduct(row, col, matrixIndex);
    
}
