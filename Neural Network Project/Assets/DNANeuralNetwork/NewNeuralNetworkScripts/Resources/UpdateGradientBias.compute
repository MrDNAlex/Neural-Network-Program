// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
struct MatrixDimensions
{
    int width;
    int height;
    
    int GetLength()
    {
        return width * height;
    }
};

//Dimensions      Node Values = cost Gradient Bias
RWStructuredBuffer<MatrixDimensions> dimensions; //node Value

//Node Values
RWStructuredBuffer<double> nodeValues;

//Expected Outputs
RWStructuredBuffer<double> costGradientBias;


int GetNodeIndex(int row, int column)
{
    return (column * dimensions[0].height + row); // used to be (row * dimensions[0].width + column)
}

int GetNodeMatrixOffset(int matrixIndex)
{
    return matrixIndex * dimensions[0].GetLength();
}

[numthreads(1, 1, 1)]
void CSMain(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    int row = DispatchThreadID.y;
    int col = DispatchThreadID.x;
    int matrixIndex = DispatchThreadID.z;
    
    costGradientBias[GetNodeIndex(row, col)] += nodeValues[GetNodeIndex(row, col)];
}
