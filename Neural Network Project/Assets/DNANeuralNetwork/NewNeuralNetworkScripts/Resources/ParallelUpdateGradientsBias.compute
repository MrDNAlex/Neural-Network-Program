// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct MatrixDimensions
{
    int width;
    int height;
    
    int GetLength()
    {
        return width * height;
    }
};

//Dimensions      Node Values = cost Gradient Bias
RWStructuredBuffer<MatrixDimensions> dimensions; //node Value

//Node Values
RWStructuredBuffer<double> nodeValues;

//Expected Outputs
RWStructuredBuffer<double> costGradientBias;

int GetNodeIndex(int row, int column)
{
    return (column * dimensions[0].height + row); // used to be (row * dimensions[0].width + column)
}

int GetNodeMatrixOffset(int matrixIndex)
{
    return matrixIndex * dimensions[0].GetLength();
}

int GetTotalIndex(int row, int col, int matrixIndex)
{
    return GetNodeMatrixOffset(matrixIndex) + GetNodeIndex(row, col);

}

double GetValue(int row, int col, int matrixIndex)
{
    return nodeValues[GetNodeMatrixOffset(matrixIndex) + GetNodeIndex(row, col)];
}

groupshared double sharedArray[32];

[numthreads(1, 1, 32)]
void CSMain(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    int row = DispatchThreadID.y;
    int col = DispatchThreadID.x;
    int matrixIndex = DispatchThreadID.z;
    
    // Each thread computes its value
    double value = nodeValues[GetNodeMatrixOffset(matrixIndex) + GetNodeIndex(row, col)];

    // Write the value to shared memory
    sharedArray[matrixIndex] = value;

    // Synchronize to ensure all writes to shared memory are completed
    GroupMemoryBarrierWithGroupSync();

    // One thread in the group sums the values and writes to global memory
    if (matrixIndex == 0)
    {
        double sum = 0;
        for (int i = 0; i < 32; ++i)
        {
            sum += sharedArray[i];
        }

        // Perform the final operation
        costGradientBias[GetNodeIndex(row, col)] += sum;
    }

}
