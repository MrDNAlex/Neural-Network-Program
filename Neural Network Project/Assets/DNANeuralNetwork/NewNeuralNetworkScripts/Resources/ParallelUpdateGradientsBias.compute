// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct MatrixDimensions
{
    uint width;
    uint height;
    
    uint GetLength()
    {
        return width * height;
    }
};

//Dimensions      Node Values = cost Gradient Bias
RWStructuredBuffer<MatrixDimensions> dimensions; //node Value

//Node Values
RWStructuredBuffer<double> nodeValues;

//Expected Outputs
RWStructuredBuffer<double> costGradientBias;


uint GetNodeIndex(uint row, uint column)
{
    return row * dimensions[0].width + column;
}

uint GetNodeMatrixOffset(uint matrixIndex)
{
    return matrixIndex * (dimensions[0].GetLength());
}



[numthreads(1, 1, 1)]
void CSMain(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    uint row = DispatchThreadID.y;
    uint col = DispatchThreadID.x;
    uint matrixIndex = DispatchThreadID.z;
    
    costGradientBias[GetNodeIndex(row, col)] += nodeValues[GetNodeMatrixOffset(matrixIndex) + GetNodeIndex(row, col)];
}
